class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        def bfs(i:int,j:int,visited,x:int,y:int,grid):
            queue=[]
            queue.append((i,j))
            visited[i][j]=1

            while(len(queue)!=0):
                rem=queue.pop(0)
                row=rem[0]
                col=rem[1]

                for k in range(-1,2):
                    for l in range(-1,2):
                        if(row+k<x and row+k>=0 and col+l<y and col+l>=0) and (visited[row+k][col+l]==0)and(grid[row+k][col+l]=="1")and(k*l==0):
                            queue.append((row+k,col+l))
                            visited[row+k][col+l]=1
            

        x=len(grid)
        y=len(grid[0])

        visited=[[0 for i in range(y+1)]for j in range(x+1)]
        
        count=0
        
        for i in range(0,x):
            for j in range(0,y):
                #print(visited[i][j]==0 and grid[i][j]=="1")
                if(visited[i][j]==0)and(grid[i][j]=="1"):
                    count+=1
                    bfs(i,j,visited,x,y,grid)
                    
        return count

    